function bpmnModeler(e){return{restrict:"A",scope:{data:"=bpmnModeler"},link:function(t,o,n){var r=window.BpmnJS,i=(angular.element("#js-drop-zone"),new r({container:o}));e.get("http://localhost:4500/test").then(function(e){i.importXML(e.data.data,function(e){var t=i.get("canvas");t.zoom("fit-viewport")})})}}}var app=angular.module("stepNext",["ngRoute"]);app.config(["$routeProvider",function(e){e.when("/modeler",{templateUrl:"workflow/modeler.html",controller:"modelerController"}).when("/fileBrowser",{templateUrl:"workflow/fileBrowser.html",controller:"fileBrowserController"}).otherwise({redirectTo:"/modeler"})}]);var app=angular.module("stepNext");app.directive("bpmnModeler",["$http",bpmnModeler]),function(){"use strict";function e(e){var t={};return t.fetchFile=function(t){return e.get("/api/resource?resource="+encodeURIComponent(t))},t}var t=angular.module("stepNext");t.requires.push("jsTree.directive"),t.requires.push("ui.ace"),t.factory("FetchFileFactory",["$http",e])}(),function(){"use strict";function e(e,t,o,n,r){var i=ace.edit("aceEditor");e.fileViewer="Please select a file to view its contents",$(".content").hide(),$(".textContent").hide(),$("#message").html("<h4>Please select a file to view its contents</h4>");var s=window.BpmnJS;e.tree_core={multiple:!1,check_callback:function(e,t,o,n,r){return"move_node"!==e}},e.nodeSelected=function(l,a){var c=a.node.li_attr;if(c.isLeaf)if(c.id.indexOf(".pdf")>-1)$(".content").hide(),$(".textContent").show(),t.get("/api/resource?resource="+encodeURIComponent(c.base),{responseType:"arraybuffer"}).success(function(t){var n=new Blob([t],{type:"application/pdf"}),i=URL.createObjectURL(n);e.pdfUrl=o.trustAsResourceUrl(i).toString(),r.$getByHandle("my-pdf-container").load(e.pdfUrl),$("#save").hide(),$("#aceEditor").hide(),$("#message").html(""),$("#pdfViewer").show()}).error(function(){console.log("Error in reading pdf")});else if(c.id.indexOf(".bpmn")>-1){$(".textContent").hide(),$(".bjs-container").remove(),$("#message").html(""),$(".content").show();var d=angular.element("#js-drop-zone"),f=new s({container:d});n.fetchFile(c.base).then(function(e){var t=e.data;"object"==typeof t&&(t=JSON.stringify(t,void 0,2));var o=t;f.importXML(o,function(e){var t=f.get("canvas");t.zoom("fit-viewport")})}),e.saveBpmn=function(){var e;f.saveXML({format:!0},function(t,o){e=o}),t.post("/save",{content:e}).success(function(e){"Success"==e&&$("#message").html("Workflow edited successfully")})}}else $(".content").hide(),$("#message").html(""),$(".textContent").show(),n.fetchFile(c.base).then(function(t){var o=t.data;"object"==typeof o&&(o=JSON.stringify(o,void 0,2)),e.fileViewer=o,$("#save").show(),$("#message").html(""),c.id.indexOf(".xml")>-1||c.id.indexOf(".xsd")>-1||c.id.indexOf(".activiti")>-1?i.session.setMode("ace/mode/xml"):c.id.indexOf(".drl")>-1?i.session.setMode("ace/mode/drlfile"):c.id.indexOf(".html")>-1?i.session.setMode("ace/mode/html"):c.id.indexOf(".groovy")>-1?i.session.setMode("ace/mode/groovy"):c.id.indexOf(".properties")>-1?i.session.setMode("ace/mode/properties"):i.session.setMode("ace/mode/text"),$("#aceEditor").show(),$("#pdfViewer").hide(),i.$blockScrolling=1/0,i.setReadOnly(!1),i.setValue(o)});else e.$apply(function(){e.fileViewer="Please select a file to view its contents",$(".textContent").hide(),$(".content").hide(),$("#message").html("<h4>Please select a file to view its contents</h4>")})}}var t=angular.module("stepNext");t.requires.push("jsTree.directive"),t.requires.push("ui.ace"),t.requires.push("pdf"),t.controller("fileBrowserController",["$scope","$http","$sce","FetchFileFactory","pdfDelegate",e])}(),function(){function e(e,t){e.schema=""}angular.module("stepNext").controller("modelerController",["$scope","$http",e])}();
//# sourceMappingURL=data:application/json;base64,
